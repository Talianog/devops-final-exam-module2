name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and tag Docker image with current date and time
      id: build-image
      run: |
        IMAGE_TAG=$(date +'%Y_%m_%d--%H_%M_%S')
        docker build . --file Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/devops-final-exam-part2:$IMAGE_TAG --tag ${{ secrets.DOCKERHUB_USERNAME }}/devops-final-exam-part2:latest
        echo "::set-output name=image-tag::$IMAGE_TAG"

    - name: Test the Docker image
      run: |
        IMAGE_TAG=${{ steps.build-image.outputs.image-tag }}
        docker run --name devops-final-exam-part2-container -d -p 5000:5000 ${{ secrets.DOCKERHUB_USERNAME }}/devops-final-exam-part2:$IMAGE_TAG
        # Wait for the container to be up and running
        sleep 10
        # Test if the app is running by making a request
        curl --fail http://127.0.0.1:5000/api/doc || (docker logs devops-final-exam-part2-container && exit 1)
        docker stop devops-final-exam-part2-container

    - name: Push the Docker image
      run: |
        IMAGE_TAG=${{ steps.build-image.outputs.image-tag }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/devops-final-exam-part2:$IMAGE_TAG
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/devops-final-exam-part2:latest
        
    - name: AWS CLI Configure
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region ${{ secrets.AWS_REGION }}

    - name: Update ECS Service
      run: |
        aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service ${{ secrets.ECS_SERVICE_NAME }} --force-new-deployment
